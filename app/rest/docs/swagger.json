{
    "swagger": "2.0",
    "info": {
        "description": "Swagger API for Loyalty Card Service.",
        "title": "Loyalty Card Swagger API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Coding4u",
            "email": "oi@coding4u.com.br"
        },
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/guests": {
            "post": {
                "description": "Router for create a new guest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guest"
                ],
                "summary": "create a new guest",
                "operationId": "createGuest",
                "parameters": [
                    {
                        "description": "JSON body for create a new guest",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CreateGuestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.IDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/guests/{guest_id}": {
            "get": {
                "description": "Router for find a guest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guest"
                ],
                "summary": "find a gust",
                "operationId": "findGuest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Guest ID",
                        "name": "guest_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.Guest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/scores": {
            "post": {
                "description": "Router for create a new score",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "create a new score",
                "operationId": "createScore",
                "parameters": [
                    {
                        "description": "JSON body for create a new score",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CreateScoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.IDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/scores/{score_id}": {
            "get": {
                "description": "Router for find a score",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "find a score",
                "operationId": "findScore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Score ID",
                        "name": "score_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.Score"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/scores/{score_id}/use": {
            "post": {
                "description": "Router for use a score",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Score"
                ],
                "summary": "use a score",
                "operationId": "useScore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Score ID",
                        "name": "score_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/rest.HTTPResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "rest.CreateGuestRequest": {
            "type": "object",
            "properties": {
                "doc": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "rest.CreateScoreRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "guest_id": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "rest.Guest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "doc": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "rest.HTTPResponse": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string",
                    "example": "any message"
                }
            }
        },
        "rest.IDResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "rest.Score": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "doc": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "used_in": {
                    "type": "string"
                },
                "was_used": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}